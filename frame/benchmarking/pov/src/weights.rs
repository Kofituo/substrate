
//! Autogenerated weights for frame_benchmarking_pallet_pov
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-21, STEPS: `50`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `oty-parity`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --dev
// --pallet
// frame-benchmarking-pallet-pov
// --extrinsic
// 
// --steps
// 50
// --repeat
// 1
// --template=.maintain/frame-weight-template.hbs
// --output=frame/benchmarking/pov/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for frame_benchmarking_pallet_pov.
pub trait WeightInfo {
	fn storage_single_value_read() -> Weight;
	fn storage_single_value_ignored_read() -> Weight;
	fn storage_single_value_ignored_some_read() -> Weight;
	fn storage_single_value_read_twice() -> Weight;
	fn storage_single_value_write() -> Weight;
	fn storage_single_value_kill() -> Weight;
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight;
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight;
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight;
	fn storage_value_bounded_read() -> Weight;
	fn storage_value_unbounded_read() -> Weight;
	fn storage_value_unbounded_ignored_read() -> Weight;
	fn storage_value_bounded_and_unbounded_read() -> Weight;
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight;
	fn emit_event() -> Weight;
	fn noop() -> Weight;
}

/// Weights for frame_benchmarking_pallet_pov using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `499`
		// Minimum execution time: 3_458 nanoseconds.
		Weight::from_parts(3_458_000, 499)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `0`
		// Minimum execution time: 3_261 nanoseconds.
		Weight::from_ref_time(3_261_000)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Pov Value2 (r:1 w:0)
	/// Proof: Pov Value2 (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `659`
		// Minimum execution time: 4_267 nanoseconds.
		Weight::from_parts(4_267_000, 659)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `499`
		// Minimum execution time: 3_581 nanoseconds.
		Weight::from_parts(3_581_000, 499)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_375 nanoseconds.
		Weight::from_ref_time(1_375_000)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_694 nanoseconds.
		Weight::from_ref_time(1_694_000)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `3750`
		// Minimum execution time: 20_452 nanoseconds.
		Weight::from_parts(20_452_000, 3750)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `4019`
		// Minimum execution time: 13_865 nanoseconds.
		Weight::from_parts(13_865_000, 4019)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `4519`
		// Minimum execution time: 20_114 nanoseconds.
		Weight::from_parts(20_114_000, 4519)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `0 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 285_242 nanoseconds.
		Weight::from_ref_time(319_193_183)
			// Standard Error: 196_829
			.saturating_add(Weight::from_ref_time(224_150).saturating_mul(n.into()))
			// Standard Error: 196_829
			.saturating_add(Weight::from_ref_time(674_174).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_proof_size(2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_proof_size(3006).saturating_mul(n.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `2511`
		// Minimum execution time: 157 nanoseconds.
		Weight::from_parts(157_000, 2511)
			// Standard Error: 19_831
			.saturating_add(Weight::from_ref_time(701_801).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `0 + n * (2511 ±0)`
		// Minimum execution time: 252 nanoseconds.
		Weight::from_ref_time(17_952_316)
			// Standard Error: 447_296
			.saturating_add(Weight::from_ref_time(6_497_775).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2511).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `0 + n * (2543 ±0)`
		// Minimum execution time: 206 nanoseconds.
		Weight::from_ref_time(156_536_284)
			// Standard Error: 56_734
			.saturating_add(Weight::from_ref_time(2_468_854).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2543).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `528`
		// Minimum execution time: 2_620 nanoseconds.
		Weight::from_parts(2_620_000, 528)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `604`
		// Minimum execution time: 2_271 nanoseconds.
		Weight::from_parts(2_271_000, 604)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Ignored)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `0`
		// Minimum execution time: 2_157 nanoseconds.
		Weight::from_ref_time(2_157_000)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1132`
		// Minimum execution time: 2_964 nanoseconds.
		Weight::from_parts(2_964_000, 1132)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `666 + l * (1 ±0)`
		// Minimum execution time: 3_384 nanoseconds.
		Weight::from_parts(3_384_000, 666)
			// Standard Error: 7
			.saturating_add(Weight::from_ref_time(306).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `4194803`
		// Minimum execution time: 3_481 nanoseconds.
		Weight::from_parts(3_481_000, 4194803)
			// Standard Error: 4
			.saturating_add(Weight::from_ref_time(309).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `1448 + l * (4 ±0)`
		// Minimum execution time: 4_528 nanoseconds.
		Weight::from_parts(4_528_000, 1448)
			// Standard Error: 6
			.saturating_add(Weight::from_ref_time(491).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `8389606`
		// Minimum execution time: 4_991 nanoseconds.
		Weight::from_parts(4_991_000, 8389606)
			// Standard Error: 6
			.saturating_add(Weight::from_ref_time(505).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4195527 + l * (2 ±0)`
		// Minimum execution time: 4_429 nanoseconds.
		Weight::from_parts(4_429_000, 4195527)
			// Standard Error: 6
			.saturating_add(Weight::from_ref_time(497).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4195527 + l * (2 ±0)`
		// Minimum execution time: 4_751 nanoseconds.
		Weight::from_parts(4_751_000, 4195527)
			// Standard Error: 9
			.saturating_add(Weight::from_ref_time(503).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(2).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// Storage: Pov UnboundedMap2 (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap2 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293 + i * (8 ±0)`
		//  Estimated: `5524 + i * (16 ±0)`
		// Minimum execution time: 6_600 nanoseconds.
		Weight::from_parts(9_737_146, 5524)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(16).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `5243 + i * (4 ±0)`
		// Minimum execution time: 6_582 nanoseconds.
		Weight::from_parts(9_832_528, 5243)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Ignored)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `2768 + i * (4 ±0)`
		// Minimum execution time: 6_015 nanoseconds.
		Weight::from_parts(8_260_238, 2768)
			// Standard Error: 1_127
			.saturating_add(Weight::from_ref_time(2_918).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_290 nanoseconds.
		Weight::from_ref_time(9_290_000)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_903 nanoseconds.
		Weight::from_ref_time(2_903_000)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `499`
		// Minimum execution time: 3_458 nanoseconds.
		Weight::from_parts(3_458_000, 499)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `0`
		// Minimum execution time: 3_261 nanoseconds.
		Weight::from_ref_time(3_261_000)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Pov Value2 (r:1 w:0)
	/// Proof: Pov Value2 (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `659`
		// Minimum execution time: 4_267 nanoseconds.
		Weight::from_parts(4_267_000, 659)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `499`
		// Minimum execution time: 3_581 nanoseconds.
		Weight::from_parts(3_581_000, 499)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_375 nanoseconds.
		Weight::from_ref_time(1_375_000)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_694 nanoseconds.
		Weight::from_ref_time(1_694_000)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `3750`
		// Minimum execution time: 20_452 nanoseconds.
		Weight::from_parts(20_452_000, 3750)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `4019`
		// Minimum execution time: 13_865 nanoseconds.
		Weight::from_parts(13_865_000, 4019)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `4519`
		// Minimum execution time: 20_114 nanoseconds.
		Weight::from_parts(20_114_000, 4519)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `0 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 285_242 nanoseconds.
		Weight::from_ref_time(319_193_183)
			// Standard Error: 196_829
			.saturating_add(Weight::from_ref_time(224_150).saturating_mul(n.into()))
			// Standard Error: 196_829
			.saturating_add(Weight::from_ref_time(674_174).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_proof_size(2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_proof_size(3006).saturating_mul(n.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `2511`
		// Minimum execution time: 157 nanoseconds.
		Weight::from_parts(157_000, 2511)
			// Standard Error: 19_831
			.saturating_add(Weight::from_ref_time(701_801).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `0 + n * (2511 ±0)`
		// Minimum execution time: 252 nanoseconds.
		Weight::from_ref_time(17_952_316)
			// Standard Error: 447_296
			.saturating_add(Weight::from_ref_time(6_497_775).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2511).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `0 + n * (2543 ±0)`
		// Minimum execution time: 206 nanoseconds.
		Weight::from_ref_time(156_536_284)
			// Standard Error: 56_734
			.saturating_add(Weight::from_ref_time(2_468_854).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(2543).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `528`
		// Minimum execution time: 2_620 nanoseconds.
		Weight::from_parts(2_620_000, 528)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `604`
		// Minimum execution time: 2_271 nanoseconds.
		Weight::from_parts(2_271_000, 604)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Ignored)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `0`
		// Minimum execution time: 2_157 nanoseconds.
		Weight::from_ref_time(2_157_000)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1132`
		// Minimum execution time: 2_964 nanoseconds.
		Weight::from_parts(2_964_000, 1132)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `666 + l * (1 ±0)`
		// Minimum execution time: 3_384 nanoseconds.
		Weight::from_parts(3_384_000, 666)
			// Standard Error: 7
			.saturating_add(Weight::from_ref_time(306).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_proof_size(1).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `4194803`
		// Minimum execution time: 3_481 nanoseconds.
		Weight::from_parts(3_481_000, 4194803)
			// Standard Error: 4
			.saturating_add(Weight::from_ref_time(309).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `1448 + l * (4 ±0)`
		// Minimum execution time: 4_528 nanoseconds.
		Weight::from_parts(4_528_000, 1448)
			// Standard Error: 6
			.saturating_add(Weight::from_ref_time(491).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `8389606`
		// Minimum execution time: 4_991 nanoseconds.
		Weight::from_parts(4_991_000, 8389606)
			// Standard Error: 6
			.saturating_add(Weight::from_ref_time(505).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4195527 + l * (2 ±0)`
		// Minimum execution time: 4_429 nanoseconds.
		Weight::from_parts(4_429_000, 4195527)
			// Standard Error: 6
			.saturating_add(Weight::from_ref_time(497).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4195527 + l * (2 ±0)`
		// Minimum execution time: 4_751 nanoseconds.
		Weight::from_parts(4_751_000, 4195527)
			// Standard Error: 9
			.saturating_add(Weight::from_ref_time(503).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(2).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// Storage: Pov UnboundedMap2 (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap2 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293 + i * (8 ±0)`
		//  Estimated: `5524 + i * (16 ±0)`
		// Minimum execution time: 6_600 nanoseconds.
		Weight::from_parts(9_737_146, 5524)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(16).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `5243 + i * (4 ±0)`
		// Minimum execution time: 6_582 nanoseconds.
		Weight::from_parts(9_832_528, 5243)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Ignored)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `2768 + i * (4 ±0)`
		// Minimum execution time: 6_015 nanoseconds.
		Weight::from_parts(8_260_238, 2768)
			// Standard Error: 1_127
			.saturating_add(Weight::from_ref_time(2_918).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_290 nanoseconds.
		Weight::from_ref_time(9_290_000)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_903 nanoseconds.
		Weight::from_ref_time(2_903_000)
	}
}
